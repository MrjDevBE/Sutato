@page "/"
@page "/login"
@using Sutato.Client.Features.Auth.Services
@using Sutato.Shared.Features.Auth
@inject HttpClient Http
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager Navigation
@inject NavigationManager NavigationManager
@inject AuthState AuthState
@inject ISnackbar Snackbar

<div style="display:flex;justify-content:center;align-items:center;height:100vh;background-color:#e6f4f1;">
    <MudPaper Class="pa-6"
              Elevation="6"
              Style="
            max-width:400px;
            width:100%;
            background-color:#ffffff;
            border-radius:24px;
            box-shadow:0 12px 24px rgba(0,0,0,0.12);
            display:flex;
            flex-direction:column;
            align-items:center;
            padding:2rem;
          ">

        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-6" Style="color:#002646;font-weight:700;">
            Sutāto
        </MudText>

        <!-- Username -->
        <MudTextField @bind-Value="Username"
                      Label="Username"
                      Color="Color.Primary"
                      Class="login-input" />

        <!-- Password with eye toggle -->
        <MudTextField @bind-Value="Password"
                      Label="Password"
                      InputType="@(_showPassword? InputType.Text: InputType.Password)"
                      Color="Color.Primary"
                      Adornment="Adornment.End"
                      AdornmentIcon="@(_showPassword? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                      OnAdornmentClick="TogglePasswordVisibility"
                      Class="login-input" />

        <!-- Login Button -->
        <MudButton OnClick="LoginUser"
                   Variant="Variant.Filled"
                   Size="Size.Large"
                   Class="login-button">
            Login
        </MudButton>
    </MudPaper>
    </div>

    <style>
   
    /* Input fields */
    .login-input {
        margin-bottom: 20px;
        width: 100%;
        --mud-palette-primary: #5a86ad;
        border-radius: 12px !important;
        border: 1px solid #5a86ad;
        height: 56px;
        transition: all 0.3s ease;
        padding-left: 16px; /* Padding inside text */
        padding-right: 16px; /* Extra padding for eye icon */
        box-sizing: border-box;
    }

        /* Make sure the eye icon doesn't overlap text */
        .login-input .mud-input-adornment {
            margin-right: 8px; /* space between text and icon */
        }

        /* Hover effects */
        .login-input:hover {
            border-color: #e49d22;
            box-shadow: 0 4px 12px rgba(228,157,34,0.2);
        }

    /* Eye icon for password */
    .mud-input-adornment svg {
        color: #5a86ad;
        cursor: pointer;
        transition: color 0.2s ease-in-out, transform 0.2s ease-in-out;
    }

        .mud-input-adornment svg:hover {
            color: #e49d22;
            transform: scale(1.1);
        }

        /* Button */
        .login-button {
        background-color: #5a86ad !important;
            color: white !important;
            width: 100%;
            border-radius: 12px !important;
            height: 56px;
            font-weight: 600;
            font-size: 1rem;
            box-shadow: 0 6px 14px rgba(228,157,34,0.25);
            transition: all 0.3s ease;
        }

            .login-button:hover {
            background-color: #81a0bb !important;
                box-shadow: 0 8px 20px rgba(228,157,34,0.3);
            }

    
        
    </style>


@code {
    private string Username { get; set; }
    private string Password { get; set; }
    private bool _showPassword = false;
    private bool _isLoading = false;

    private async Task LoginUser()
    {
        if (string.IsNullOrWhiteSpace(Username) || string.IsNullOrWhiteSpace(Password))
        {
            Snackbar.Add("Please enter your username and password.", Severity.Error);
            return;
        }

        _isLoading = true;

        try
        {
            var loginData = new { Username, Password };
            var response = await Http.PostAsJsonAsync("https://localhost:7061/api/auth/login", loginData);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();

                if (result != null && !string.IsNullOrEmpty(result.Token))
                {
                    await AuthState.SetLoggedIn(true, result.Token);
                    NavigationManager.NavigateTo("/overview", forceLoad: true);
                }
                else
                {
                    Snackbar.Add("Login failed: No token returned.", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Invalid username or password.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Login error: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void TogglePasswordVisibility()
    {
        _showPassword = !_showPassword;
    }
}